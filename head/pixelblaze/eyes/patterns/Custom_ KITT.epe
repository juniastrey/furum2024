{
  "name": "Custom: KITT",
  "id": "MB2cfdQQ9DquMBgEP",
  "sources": {
    "main": "// Note: Modified for 2D.\n\n/*\n  Knight Rider: A car named KITT gains sentience and fights critme and all that \n  good stuff.\n  \n  Want to learn how to code patterns like this? This pattern has a YouTube\n  video walkthrough:\n  \n    https://www.youtube.com/watch?v=3ugNIZ96UK4\n*/\n\nlogicalPixelCount = 15 + 4\nearsPixelCount = 46\n\nleader = 0\ndirection = 1\npixels = array(logicalPixelCount)\n\nspeed = logicalPixelCount / 800\nfade = .0007\nexport function beforeRender(delta) {\n  lastLeader = floor(leader)\n  leader += direction * delta * speed\n  \n  if (leader >= logicalPixelCount) {\n    direction = -direction\n    leader = logicalPixelCount - 1\n  }\n  \n  if (leader < 0) {\n    direction = -direction\n    leader = 0\n  }\n\n  // Fill pixels between frames. Added after the video walkthrough was uploaded.\n  up = lastLeader < leader \n  for (i = lastLeader; i != floor(leader); up ? i++ : i-- ) pixels[i] = 1\n    \n  for (i = 0; i < logicalPixelCount; i++) {\n    pixels[i] -= delta * fade\n    pixels[i] = max(0, pixels[i])\n  }\n}\n\nexport function render2D(index, x, y) {\n  index = 3 + floor(((x > 0.5) ? (2 - 2*x) : (2*x)) * (logicalPixelCount - 3) - y*3)\n  v = pixels[index]\n  v = v * v * v\n  hsv(0, 1, v)\n}\n\nexport function render(index) {\n  v = pixels[index]\n  v = v * v * v\n  hsv(0, 1, v)\n}"
  },
  "preview": "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"
}
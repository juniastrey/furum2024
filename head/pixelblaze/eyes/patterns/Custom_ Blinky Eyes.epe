{
  "name": "Custom: Blinky Eyes",
  "id": "RZFphNHkupng64LgZ",
  "sources": {
    "main": "// Note: Modified to have different eye design and behaviour. Comments from original are unchanged.\n\n/**\n *  Blinky Eyes 2D - 6/5/2022\n *  Debra Ansell (GeekMomProjects)\n *  Simple code to display 1 or 2 blinking eyes on an LED matrix. Tested on a 20 x 10 display of two LED pillows \n *  here (https://photos.app.goo.gl/irA56QcfWofg1i6UA) and on a rectangular 30 x 24 grid. Probably won't\n *  look very good at much lower resolution. Fine tuning variable values for the best look will likely depend a lot\n *  on the size and resolution of the specific display.\n * */\n\nvar neyes = 2             // Show 1 or 2 eyes on the display\nvar radius = 2.5\nvar Bmax = 4             // Maximum eye height (Using value of 0.25 for 1 eye, 0.20 for 2 eyes)\nvar Riris = 1.5          // Radius of the iris (using value of 0.16 for 1 eye, 0.12 for 2 eyes)\nvar blink = false         // Are we in the middle of a blink?\nvar blinkPhase = 0        // How long have we been in this phase of blinking (value in seconds)\nvar blinkInterval = 3     // Time interval (in seconds) before the next blink\nvar blinkLength = .5      // Total time interval (in seconds) of the blink\nvar move = false          // Are the irises moving? (from center to side, then back again)\nvar movePhase = 0         // How long have we been in this phase of iris motion (value in seconds)\nvar moveDir = 1           // Which direction are the irises moving (either -1 or 1)\nvar moveInterval = 10    // Time interval (in seconds) before we move \nvar moveLength = 2       // Total time interval (in seconds) for the eye movement\nvar midIris = 0           // Position of the middle of the iris relative to the middle of the eye\nvar B                     // Current eye outline (ellipse) height for use in the ellipse equation (changes during the blink phase)\n\nvar matrixRows = 4\nvar matrixCols = 15\n\nexport function beforeRender(delta) {\n\n  // Update our motion timer\n  movePhase += delta/1000\n  if (move) {\n    if (movePhase > moveLength) {   // At the end of motion time interval\n      movePhase = 0\n      move = false\n      //randomize time to next movement\n      moveInterval = 10 + random(.7)\n    }  else {\n        // Position of iris is changing\n        midIris = moveDir * 3 * wave(movePhase/moveLength - 0.25)\n    }\n  } else {\n    if (movePhase > moveInterval) { // At the end of motionless time interval\n      movePhase = 0\n      // Randomize direction of eye movement\n      moveDir = random(1) > 0.5 ? 1 : -1\n      move = true\n    }\n    midIris = 0\n  }\n   \n  blinkPhase += delta/1000\n  if (blink) {\n    if (blinkPhase > blinkLength) {  // At the end of blinking time interval\n      blinkPhase = 0\n      blink = false\n      // Randomize time to next blink\n      blinkInterval = 3 + random(1)\n    } else {\n        B = Bmax*wave(blinkPhase/blinkLength + 0.25)\n    }\n  } else {  //Not blinking\n    // B is at maximum value unless we are blinking\n    B = Bmax\n    if (blinkPhase > blinkInterval) { // At the end of non-blinking time interval\n      blinkPhase = 0    // Reset clock\n      blink = true      // Start blink mode\n    }\n  }\n\n}\n\n\n\nexport function render2D(index, x0, y0) {\n  // Rescale coordinates to (0,0) in center of screen. X scale depends on whether we have 1 or 2 eyes\n  x = (x0-.5)*neyes\n  if (neyes > 1) {\n    x += (x > 0 ? -0.5 : 0.5)\n  }\n  y = y0 - 0.5\n\n  x *= matrixCols\n  y *= matrixRows\n\n  if (x0 < 0.5)\n    x -= 1\n  else\n    x += 1\n\n  x -= midIris\n  \n  // Distance to elipse line\n  dscale = hypot(x, y)\n  h = (dscale < Riris) ? 0.8 : 1\n  s = dscale < Riris\n  v = dscale <= radius && radius - y <= B \n  hsv(h,s,v)\n\n}"
  },
  "preview": "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"
}